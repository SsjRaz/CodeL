[
  {
    "id": 1,
    "title": "Reverse a String",
    "language": "javascript",
    "difficulty": "easy",
    "hint": "Use array methods to reverse the string",
    "lines": [
      "function reverse(s) {",
      "  return s.split('').reverse().join('');",
      "}"
    ]
  },
  {
    "id": 2,
    "title": "Find Maximum in Array",
    "language": "javascript",
    "difficulty": "easy",
    "hint": "Use Math.max with the spread operator",
    "lines": [
      "function findMax(arr) {",
      "  return Math.max(...arr);",
      "}"
    ]
  },
  {
    "id": 3,
    "title": "Check if Palindrome",
    "language": "javascript",
    "difficulty": "medium",
    "hint": "Compare the string with its reverse",
    "lines": [
      "function isPalindrome(str) {",
      "  const clean = str.toLowerCase().replace(/[^a-z0-9]/g, '');",
      "  return clean === clean.split('').reverse().join('');",
      "}"
    ]
  },
  {
    "id": 4,
    "title": "FizzBuzz",
    "language": "javascript",
    "difficulty": "easy",
    "hint": "Check divisibility by 3 and 5",
    "lines": [
      "function fizzBuzz(n) {",
      "  if (n % 15 === 0) return 'FizzBuzz';",
      "  if (n % 3 === 0) return 'Fizz';",
      "  if (n % 5 === 0) return 'Buzz';",
      "  return n.toString();",
      "}"
    ]
  },
  {
    "id": 5,
    "title": "Sum of Array",
    "language": "python",
    "difficulty": "easy",
    "hint": "Use the reduce pattern or built-in sum",
    "lines": [
      "def sum_array(arr):",
      "    return sum(arr)"
    ]
  },
  {
    "id": 6,
    "title": "Factorial",
    "language": "javascript",
    "difficulty": "medium",
    "hint": "Use recursion or a loop",
    "lines": [
      "function factorial(n) {",
      "  if (n <= 1) return 1;",
      "  return n * factorial(n - 1);",
      "}"
    ]
  },
  {
    "id": 7,
    "title": "Count Vowels",
    "language": "javascript",
    "difficulty": "easy",
    "hint": "Use a regex or check each character",
    "lines": [
      "function countVowels(str) {",
      "  const matches = str.match(/[aeiou]/gi);",
      "  return matches ? matches.length : 0;",
      "}"
    ]
  },
  {
    "id": 8,
    "title": "Remove Duplicates",
    "language": "javascript",
    "difficulty": "medium",
    "hint": "Use Set to get unique values",
    "lines": [
      "function removeDuplicates(arr) {",
      "  return [...new Set(arr)];",
      "}"
    ]
  },
  {
    "id": 9,
    "title": "Binary Search",
    "language": "python",
    "difficulty": "hard",
    "hint": "Divide and conquer approach",
    "lines": [
      "def binary_search(arr, target):",
      "    left, right = 0, len(arr) - 1",
      "    while left <= right:",
      "        mid = (left + right) // 2",
      "        if arr[mid] == target:",
      "            return mid",
      "        elif arr[mid] < target:",
      "            left = mid + 1",
      "        else:",
      "            right = mid - 1",
      "    return -1"
    ]
  },
  {
    "id": 10,
    "title": "Capitalize Words",
    "language": "javascript",
    "difficulty": "easy",
    "hint": "Split, map, and join",
    "lines": [
      "function capitalizeWords(str) {",
      "  return str.split(' ').map(word => ",
      "    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()",
      "  ).join(' ');",
      "}"
    ]
  },
  {
    "id": 11,
    "title": "Fibonacci Number",
    "language": "javascript",
    "difficulty": "medium",
    "hint": "Use recursion with base cases",
    "lines": [
      "function fibonacci(n) {",
      "  if (n <= 1) return n;",
      "  return fibonacci(n - 1) + fibonacci(n - 2);",
      "}"
    ]
  },
  {
    "id": 12,
    "title": "Two Sum",
    "language": "python",
    "difficulty": "medium",
    "hint": "Use a hash map to store complements",
    "lines": [
      "def two_sum(nums, target):",
      "    seen = {}",
      "    for i, num in enumerate(nums):",
      "        complement = target - num",
      "        if complement in seen:",
      "            return [seen[complement], i]",
      "        seen[num] = i",
      "    return []"
    ]
  },
  {
    "id": 13,
    "title": "Merge Sorted Arrays",
    "language": "javascript",
    "difficulty": "medium",
    "hint": "Use two pointers",
    "lines": [
      "function mergeSorted(arr1, arr2) {",
      "  const result = [];",
      "  let i = 0, j = 0;",
      "  while (i < arr1.length && j < arr2.length) {",
      "    if (arr1[i] < arr2[j]) result.push(arr1[i++]);",
      "    else result.push(arr2[j++]);",
      "  }",
      "  return result.concat(arr1.slice(i)).concat(arr2.slice(j));",
      "}"
    ]
  },
  {
    "id": 14,
    "title": "Valid Parentheses",
    "language": "javascript",
    "difficulty": "medium",
    "hint": "Use a stack to track opening brackets",
    "lines": [
      "function isValid(s) {",
      "  const stack = [];",
      "  const pairs = { '(': ')', '{': '}', '[': ']' };",
      "  for (let char of s) {",
      "    if (pairs[char]) stack.push(char);",
      "    else if (pairs[stack.pop()] !== char) return false;",
      "  }",
      "  return stack.length === 0;",
      "}"
    ]
  },
  {
    "id": 15,
    "title": "Chunk Array",
    "language": "javascript",
    "difficulty": "easy",
    "hint": "Use slice in a loop",
    "lines": [
      "function chunkArray(arr, size) {",
      "  const result = [];",
      "  for (let i = 0; i < arr.length; i += size) {",
      "    result.push(arr.slice(i, i + size));",
      "  }",
      "  return result;",
      "}"
    ]
  }
]
